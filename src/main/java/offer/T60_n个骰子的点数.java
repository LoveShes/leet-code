package offer;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

/**
 * https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/
 */
public class T60_n个骰子的点数 {
    /**
     * 【超时】
     * 斐波那契数列的变形
     */
    public double[] twoSum(int n) {
        int len = 5 * n + 1;
        double total = Math.pow(6, n);
        double[] ans = new double[len];
        int dot = n;
        for (int i = 0; i < len; i++) {
            ans[i] = count(n, dot) / total;
            dot++;
        }
        return ans;
    }

    private int count(int n, int dot) {
        if (n <= 0) return 0;
        if (n == 1 && dot >= 1 && dot <= 6) return 1;
        return count(n - 1, dot - 1) + count(n - 1, dot - 2) +
                count(n - 1, dot - 3) + count(n - 1, dot - 4) +
                count(n - 1, dot - 5) + count(n - 1, dot - 6);
    }

    /**
     * 【动态规划】
     * 执行用时 :0 ms, 在所有 Java 提交中击败了100.00% 的用户
     * 内存消耗 :37.2 MB, 在所有 Java 提交中击败了100.00%的用户
     */
    public double[] twoSum2(int n) {
        double prob = 1.0 / 6;
        double[] ans = new double[5 * n + 1];
        double[][] dp = new double[n + 1][6 * n + 1]; // dp[i][j]表示有i个骰子掷出点数为j的概率
        for (int i = 1; i <= 6; i++) {
            dp[1][i] = prob;
        }
        for (int i = 2; i <= n; i++) { // 遍历骰子数
            for (int j = i; j <= 6 * i; j++) { // 点数从i一直到6*i
                for (int k = 1; k <= j && k <= 6; k++) { // 单个骰子掷出点数为[1,min(j,6)]
                    dp[i][j] += prob * (dp[i - 1][j - k]); // 剩余i-1个骰子掷出j-k点
                }
            }
        }
        System.arraycopy(dp[n], n, ans, 0, 5 * n + 1);
        return ans;
    }

    /**
     * TODO【动态规划优化】
     * 由于始终只用到上一层，故用一维数组来代替二维数组
     * 执行用时 :0 ms, 在所有 Java 提交中击败了100.00% 的用户
     * 内存消耗 :37.7 MB, 在所有 Java 提交中击败了100.00%的用户
     */
    public double[] twoSum3(int n) {
        double prob = 1.0 / 6;
        double[] ans = new double[5 * n + 1];
        double[] dp = new double[6 * n + 1]; // dp[i][j]表示有i个骰子掷出点数为j的概率
        for (int i = 1; i <= 6; i++) {
            dp[i] = prob;
        }
        for (int i = 2; i <= n; i++) { // 遍历骰子数
            for (int j = 6 * i; j >= i; j--) { // 注意，这里点数从大到小
                dp[j] = 0; // 每一轮转换都要清0
                for (int k = 1; j - k >= i - 1 && k <= 6; k++) {
                    dp[j] += prob * (dp[j - k]); // 剩余i-1个骰子掷出j-k点
                }
            }
        }
        System.arraycopy(dp, n, ans, 0, 5 * n + 1);
        return ans;
    }

    /**
     * 【娱乐解法】
     */
    public double[] twoSum4(int n) {
        double[][] ans = new double[][]{
                {},
                {0.16667, 0.16667, 0.16667, 0.16667, 0.16667, 0.16667},
                {0.02778, 0.05556, 0.08333, 0.11111, 0.13889, 0.16667, 0.13889, 0.11111, 0.08333, 0.05556, 0.02778},
                {0.00463, 0.01389, 0.02778, 0.04630, 0.06944, 0.09722, 0.11574, 0.12500, 0.12500, 0.11574, 0.09722, 0.06944, 0.04630, 0.02778, 0.01389, 0.00463},
                {0.00077, 0.00309, 0.00772, 0.01543, 0.02701, 0.04321, 0.06173, 0.08025, 0.09645, 0.10802, 0.11265, 0.10802, 0.09645, 0.08025, 0.06173, 0.04321, 0.02701, 0.01543, 0.00772, 0.00309, 0.00077},
                {0.00013, 0.00064, 0.00193, 0.00450, 0.00900, 0.01620, 0.02636, 0.03922, 0.05401, 0.06944, 0.08372, 0.09452, 0.10031, 0.10031, 0.09452, 0.08372, 0.06944, 0.05401, 0.03922, 0.02636, 0.01620, 0.00900, 0.00450, 0.00193, 0.00064, 0.00013},
                {0.00002, 0.00013, 0.00045, 0.00120, 0.00270, 0.00540, 0.00977, 0.01620, 0.02488, 0.03571, 0.04816, 0.06121, 0.07354, 0.08372, 0.09047, 0.09285, 0.09047, 0.08372, 0.07354, 0.06121, 0.04816, 0.03571, 0.02488, 0.01620, 0.00977, 0.00540, 0.00270, 0.00120, 0.00045, 0.00013, 0.00002},
                {0.00000, 0.00003, 0.00010, 0.00030, 0.00075, 0.00165, 0.00328, 0.00595, 0.01003, 0.01578, 0.02336, 0.03266, 0.04328, 0.05454, 0.06547, 0.07499, 0.08204, 0.08579, 0.08579, 0.08204, 0.07499, 0.06547, 0.05454, 0.04328, 0.03266, 0.02336, 0.01578, 0.01003, 0.00595, 0.00328, 0.00165, 0.00075, 0.00030, 0.00010, 0.00003, 0.00000},
                {0.00000, 0.00000, 0.00002, 0.00007, 0.00020, 0.00047, 0.00102, 0.00201, 0.00366, 0.00624, 0.01001, 0.01517, 0.02184, 0.02994, 0.03918, 0.04905, 0.05883, 0.06769, 0.07477, 0.07936, 0.08094, 0.07936, 0.07477, 0.06769, 0.05883, 0.04905, 0.03918, 0.02994, 0.02184, 0.01517, 0.01001, 0.00624, 0.00366, 0.00201, 0.00102, 0.00047, 0.00020, 0.00007, 0.00002, 0.00000, 0.00000},
                {0.00000, 0.00000, 0.00000, 0.00002, 0.00005, 0.00013, 0.00030, 0.00063, 0.00124, 0.00226, 0.00390, 0.00635, 0.00982, 0.01448, 0.02040, 0.02753, 0.03567, 0.04442, 0.05324, 0.06148, 0.06844, 0.07349, 0.07615, 0.07615, 0.07349, 0.06844, 0.06148, 0.05324, 0.04442, 0.03567, 0.02753, 0.02040, 0.01448, 0.00982, 0.00635, 0.00390, 0.00226, 0.00124, 0.00063, 0.00030, 0.00013, 0.00005, 0.00002, 0.00000, 0.00000, 0.00000},
                {0.00000, 0.00000, 0.00000, 0.00000, 0.00001, 0.00003, 0.00008, 0.00019, 0.00039, 0.00077, 0.00141, 0.00245, 0.00403, 0.00634, 0.00954, 0.01375, 0.01904, 0.02539, 0.03262, 0.04046, 0.04846, 0.05612, 0.06287, 0.06816, 0.07153, 0.07269, 0.07153, 0.06816, 0.06287, 0.05612, 0.04846, 0.04046, 0.03262, 0.02539, 0.01904, 0.01375, 0.00954, 0.00634, 0.00403, 0.00245, 0.00141, 0.00077, 0.00039, 0.00019, 0.00008, 0.00003, 0.00001, 0.00000, 0.00000, 0.00000, 0.00000},
                {0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00001, 0.00002, 0.00005, 0.00012, 0.00025, 0.00048, 0.00088, 0.00154, 0.00257, 0.00409, 0.00625, 0.00919, 0.01301, 0.01778, 0.02347, 0.02995, 0.03702, 0.04432, 0.05145, 0.05793, 0.06331, 0.06715, 0.06916, 0.06916, 0.06715, 0.06331, 0.05793, 0.05145, 0.04432, 0.03702, 0.02995, 0.02347, 0.01778, 0.01301, 0.00919, 0.00625, 0.00409, 0.00257, 0.00154, 0.00088, 0.00048, 0.00025, 0.00012, 0.00005, 0.00002, 0.00001, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000}
        };
        return ans[n];
    }

    @Test
    public void test() {
        // System.out.println(Arrays.toString(twoSum(1)));
        // System.out.println(Arrays.toString(twoSum2(1)));
        System.out.println(Arrays.toString(twoSum2(2)));
        System.out.println(Arrays.toString(twoSum3(2)));
        System.out.println(Arrays.toString(twoSum2(3)));
        System.out.println(Arrays.toString(twoSum3(3)));

    }
}
